
/*
Adafruit_MQTT_Subscribe * feed_time;
Adafruit_MQTT_Subscribe * feed_pulse_ms;
Adafruit_MQTT_Subscribe * feed_onoff0;
Adafruit_MQTT_Subscribe * feed_onoff1;
Adafruit_MQTT_Subscribe * feed_pulse0;
Adafruit_MQTT_Subscribe * feed_pulse1; 

void setupSubscriptions() {
  feed_time = new Adafruit_MQTT_Subscribe(mqtt, "time/seconds");
  feed_pulse_ms = new Adafruit_MQTT_Subscribe(mqtt, MQTT_USERNAME "/feeds/pulse_ms", MQTT_QOS_1);
  feed_onoff0 = new Adafruit_MQTT_Subscribe(mqtt, MQTT_USERNAME "/feeds/onoff0", MQTT_QOS_1);
  feed_onoff1 = new Adafruit_MQTT_Subscribe(mqtt, MQTT_USERNAME "/feeds/onoff1", MQTT_QOS_1);
  feed_pulse0 = new Adafruit_MQTT_Subscribe(mqtt, MQTT_USERNAME "/feeds/pulse0", MQTT_QOS_1);
  feed_pulse1 = new Adafruit_MQTT_Subscribe(mqtt, MQTT_USERNAME "/feeds/pulse1", MQTT_QOS_1);

  feed_time->setCallback(timecallback);
  feed_pulse0->setCallback(callback_pulse0);
  feed_pulse0->setCallback(callback_pulse1);
  feed_onoff0->setCallback(callback_onoff0);
  feed_onoff1->setCallback(callback_onoff1);
}
*/

   // Setup the MQTT client class by passing in the WiFi client and MQTT server and login details.
  //mqtt = new Adafruit_MQTT_Client(ws_client, AIO_SERVER, AIO_SERVERPORT, MQTT_USERNAME, MQTT_USERNAME, MQTT_KEY);


  // Connect to server
  //ws->connectSecure(AIO_SERVER, 443, "/");

  // Setup Callbacks
  //ws->onMessage(onMessageCallback);
  //ws->onEvent(onEventsCallback);
  ///client.setClient(*s);

  //mqttConnect();

  // Setup MQTT subscription for time feed.
  /*
  mqtt->subscribe(feed_time);
  mqtt->subscribe(feed_pulse0);
  mqtt->subscribe(feed_pulse1);
  mqtt->subscribe(feed_onoff0);
  mqtt->subscribe(feed_onoff1);
*/

  // Ensure the connection to the MQTT server is alive (this will make the first
  // connection and automatically reconnect when disconnected).  See the MQTT_connect
  // function definition further below.
  //ws->poll();

  //MQTT_connect();

  // this is our 'wait for incominutesg subscription packets and callback em' busy subloop
  // try to spend your time here:
  //mqtt->processPackets(10000);
  
  // ping the server to keep the mqtt connection alive
  // NOT required if you are publishing once every KEEPALIVE secondsonds
  
  //if(! mqtt->ping()) {
  //  mqtt->disconnect();
  //}

  
/*
// Function to connect and reconnect as necessary to the MQTT server.
// Should be called in the loop function and it will take care if connecting.
void MQTT_connect() {
  int8_t ret;

  // Already connected.
  if (mqtt->connected())return;

  Serial_print("Connecting to MQTT->.. ");

  uint8_t retries = 3;
  while ((ret = mqtt->connect()) != 0) { // connect will return 0 for connected
    Serial_println(mqtt->connectErrorString(ret));
    Serial_println("Retrying MQTT connection in 10 secondsonds...");

    mqtt->disconnect();
    delay(10000);  // wait 10 secondsonds
    retries--;
    if (retries == 0) {
      // basically die and wait for WDT to reset me
      while (1);
    }
  }
  Serial_println("MQTT Connected!");
}
*/

/*
void reconnectMQTT()
{
  while (!mqttClient->connected())
  {
    Serial_print("Attempting MQTT connection...");

    if (! mqttConnect()) {
      Serial_print("failed, rc=");
      Serial_print(mqttClient->state());
      Serial_println(" try again in 5 seconds");

      delay_s(5000);
    }
  }
}
*/



/*
void onEventsCallback(WebsocketsEvent event, String data) {
    if(event == WebsocketsEvent::ConnectionOpened) {
        Serial.println("Connnection Opened");
    } else if(event == WebsocketsEvent::ConnectionClosed) {
        Serial.println("Connnection Closed");
    } else if(event == WebsocketsEvent::GotPing) {
        Serial.println("Got a Ping!");
    } else if(event == WebsocketsEvent::GotPong) {
        Serial.println("Got a Pong!");
    }
}
*/

/*
int seconds;
int minutes;
int hours;

int timeZone = 0; // UTC 


void timecallback(uint32_t current) {
  // adjust to local time zone
  current += (timeZone * 60 * 60);

  // calculate current time
  seconds = current % 60;
  current /= 60;
  minutes = current % 60;
  current /= 60;
  hours = current % 24;

  // print hours
  if(hours == 0 || hours == 12)
    Serial_print("12");
  if(hours < 12)
    Serial_print(hours);
  else
    Serial_print(hours - 12);

  // print minutess
  Serial_print(":");
  if(minutes < 10) Serial_print("0");
  Serial_print(minutes);

  // print secondsonds
  Serial_print(":");
  if(seconds < 10) Serial_print("0");
  Serial_print(seconds);

  if(hours < 12)
    Serial_println(" am");
  else
    Serial_println(" pm");
}
*/

/*************************** Sketch Code ************************************/
/*
//Overload delay to pat the watchdog
void __delay(unsigned long ms) {
    // Use API letting recurrent scheduled functions run in background
    // but stay blocked in delay until ms is expired.
    esp_delay(ms, [&](){ wdt_reset();return true; });
}
*/


#ifdef USE_WEBSOCKETS

/*
void onMessageCallback(WebsocketsMessage message) {
    Serial_print("Got Message: ");
    Serial_println(message.data());
}

void onEventsCallback(WebsocketsEvent event, String data) {
    if(event == WebsocketsEvent::ConnectionOpened) {
        Serial_println("Connnection Opened");
    } else if(event == WebsocketsEvent::ConnectionClosed) {
        Serial_println("Connnection Closed");
    } else if(event == WebsocketsEvent::GotPing) {
        Serial_println("Got a Ping!");
    } else if(event == WebsocketsEvent::GotPong) {
        Serial_println("Got a Pong!");
    }
}
*/
#endif